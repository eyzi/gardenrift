const std = @import("std");
const glfwc = @import("./glfw/glfw-c.zig").c;
const vkc = @import("./vulkan/vk-c.zig").c;
const EmberImage = @import("ember").types.EmberImage;
const QueueFamilyIndices = @import("./vulkan/types.zig").QueueFamilyIndices;
const Vertex = @import("./vulkan/types.zig").Vertex;
const UniformBufferObject = @import("./vulkan/types.zig").UniformBufferObject;

pub const RunState = enum {
    Initializing,
    Looping,
    Waiting,
    Failing,
    Sleeping,
    Resizing,
    Deinitializing,
};

pub const State = struct {
    configs: struct {
        app_name: [:0]const u8,
        initial_window_width: usize,
        initial_window_height: usize,
        window_resizable: bool,
        window_decorated: bool,
        window_transparent: bool,
        validation_layers: []const [:0]const u8,
        required_extension_names: []const [:0]const u8,
        icon_file: ?[:0]const u8 = null,
        model_obj: [:0]const u8,
        model_texture: [:0]const u8,
        max_frames: usize = 2,
        allocator: std.mem.Allocator,
    },
    objects: struct {
        icon: ?EmberImage = null,
    },
    instance: struct {
        instance: vkc.VkInstance = undefined,
        window: *glfwc.GLFWwindow = undefined,
        window_extensions: [][*:0]const u8 = undefined,
        surface: vkc.VkSurfaceKHR = undefined,
        surface_format: vkc.VkSurfaceFormatKHR = undefined,
        physical_device: vkc.VkPhysicalDevice = undefined,
        physical_device_properties: vkc.VkPhysicalDeviceProperties = undefined,
        device: vkc.VkDevice = undefined,
        queue_family_indices: QueueFamilyIndices = undefined,
        graphics_queue: vkc.VkQueue = undefined,
        present_queue: vkc.VkQueue = undefined,
        transfer_queue: vkc.VkQueue = undefined,
        compute_queue: vkc.VkQueue = undefined,
    },
    resources: struct {
        msaa_sample_count: u32 = vkc.VK_SAMPLE_COUNT_1_BIT,
        msaa_sample_image: vkc.VkImage = undefined,
        msaa_sample_image_view: vkc.VkImageView = undefined,
        msaa_sample_image_memory: vkc.VkDeviceMemory = undefined,
    },
    model: struct {
        vertices: []const Vertex = undefined,
        vertex_buffer: vkc.VkBuffer = undefined,
        vertex_buffer_memory: vkc.VkDeviceMemory = undefined,
        indices: []const u32 = undefined,
        index_buffer: vkc.VkBuffer = undefined,
        index_buffer_memory: vkc.VkDeviceMemory = undefined,
        uniform_buffer: []vkc.VkBuffer = undefined,
        uniform_buffer_memory: []vkc.VkDeviceMemory = undefined,
        uniform_buffer_map: [][*]UniformBufferObject = undefined,
        vert_shader_module: vkc.VkShaderModule = undefined,
        frag_shader_module: vkc.VkShaderModule = undefined,
        comp_shader_module: vkc.VkShaderModule = undefined,
    },
    pipeline: struct {
        descriptor_pool: vkc.VkDescriptorPool = undefined,
        descriptor_sets: []vkc.VkDescriptorSet = undefined,
        descriptor_set_layout: vkc.VkDescriptorSetLayout = undefined,
        layout: vkc.VkPipelineLayout = undefined,
        pipeline: vkc.VkPipeline = undefined,
        renderpass: vkc.VkRenderPass = undefined,
    },
    command: struct {
        pool: vkc.VkCommandPool = undefined,
        buffers: []vkc.VkCommandBuffer = undefined,
        image_available_semaphores: []vkc.VkSemaphore = undefined,
        render_finished_semaphores: []vkc.VkSemaphore = undefined,
        in_flight_fences: []vkc.VkFence = undefined,
    },
    swapchain: struct {
        extent: vkc.VkExtent2D = undefined,
        swapchain: vkc.VkSwapchainKHR = undefined,
        frame_buffers: []vkc.VkFramebuffer = undefined,
        image_views: []vkc.VkImageView = undefined,
        images: []vkc.VkImage = undefined,
        texture_image: vkc.VkImage = undefined,
        texture_image_view: vkc.VkImageView = undefined,
        texture_image_memory: vkc.VkDeviceMemory = undefined,
        texture_sampler: vkc.VkSampler = undefined,
        depth_format: vkc.VkFormat = undefined,
        depth_image: vkc.VkImage = undefined,
        depth_image_view: vkc.VkImageView = undefined,
        depth_image_memory: vkc.VkDeviceMemory = undefined,
    },
    loop: struct {
        run_state: RunState = RunState.Initializing,
        frame_index: usize = 0,
        timer: std.time.Timer = undefined,
    },
};

pub fn create(params: struct {
    app_name: [:0]const u8,
    initial_window_width: usize,
    initial_window_height: usize,
    window_resizable: bool = true,
    window_decorated: bool = true,
    window_transparent: bool = false,
    validation_layers: []const [:0]const u8,
    required_extension_names: []const [:0]const u8,
    allocator: std.mem.Allocator,
    icon_file: ?[:0]const u8 = null,
    model_obj: [:0]const u8,
    model_texture: [:0]const u8,
    max_frames: usize = 2,
}) State {
    return State{
        .configs = .{
            .app_name = params.app_name,
            .initial_window_width = params.initial_window_width,
            .initial_window_height = params.initial_window_height,
            .window_resizable = params.window_resizable,
            .window_decorated = params.window_decorated,
            .window_transparent = params.window_transparent,
            .required_extension_names = params.required_extension_names,
            .validation_layers = params.validation_layers,
            .allocator = params.allocator,
            .icon_file = params.icon_file,
            .model_obj = params.model_obj,
            .model_texture = params.model_texture,
            .max_frames = params.max_frames,
        },
        .objects = .{},
        .instance = .{},
        .resources = .{},
        .model = .{},
        .pipeline = .{},
        .command = .{},
        .swapchain = .{},
        .loop = .{},
    };
}
